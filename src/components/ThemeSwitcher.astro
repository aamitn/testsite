---
import { Icon } from 'astro-icon/components';
---

<div class="relative">
  <button
    id="theme-toggle"
    class="flex items-center justify-center w-10 h-10 rounded-lg text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline-none focus:ring-2 focus:ring-gray-200 dark:focus:ring-gray-700"
    aria-label="Toggle theme"
  >
    <Icon name="mdi:theme-light-dark" class="w-5 h-5" />
  </button>
  
  <div
    id="theme-dropdown"
    class="hidden absolute right-0 mt-2 w-48 py-2 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700"
  >
    <button
      class="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center"
      data-theme="light"
    >
      <Icon name="mdi:white-balance-sunny" class="w-5 h-5 mr-2" />
      Light
    </button>
    <button
      class="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center"
      data-theme="dark"
    >
      <Icon name="mdi:moon-waning-crescent" class="w-5 h-5 mr-2" />
      Dark
    </button>
    <button
      class="w-full px-4 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center"
      data-theme="system"
    >
      <Icon name="mdi:monitor" class="w-5 h-5 mr-2" />
      System
    </button>
  </div>
</div>

<script>
  const themeToggle = document.getElementById('theme-toggle');
  const themeDropdown = document.getElementById('theme-dropdown');
  const themeButtons = document.querySelectorAll('[data-theme]');
  
  // Get theme from localStorage or default to system
  const getTheme = () => localStorage.getItem('theme') || 'system';
  
  // Apply theme
  const applyTheme = (theme) => {
    if (theme === 'dark' || (theme === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    localStorage.setItem('theme', theme);
  };
  
  // Initialize theme
  applyTheme(getTheme());
  
  // Toggle dropdown
  themeToggle?.addEventListener('click', () => {
    themeDropdown?.classList.toggle('hidden');
  });
  
  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!themeToggle?.contains(e.target) && !themeDropdown?.contains(e.target)) {
      themeDropdown?.classList.add('hidden');
    }
  });
  
  // Theme selection
  themeButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const theme = button.dataset.theme;
      applyTheme(theme);
      themeDropdown?.classList.add('hidden');
    });
  });
  
  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    if (getTheme() === 'system') {
      applyTheme('system');
    }
  });
</script>